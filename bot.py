import logging
from aiogram import Bot, Dispatcher, executor, types
import sqlite3

API_TOKEN = "PASTE_YOUR_TOKEN_HERE"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS documents (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_id TEXT,
    file_name TEXT,
    category TEXT
)''')
conn.commit()

CATEGORIES = [
    "üìò –ü–ª–∞–Ω—ã", "üìÑ –ü—Ä–∏–∫–∞–∑—ã", "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª—ã", "üóÇÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã",
    "üìö –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", "üìñ –ö–Ω–∏–≥–∏", "üéì –ê—ë–Ω–∏—è—Ç“≥–æ", "üìë –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
    "üìä –û—Ç—á—ë—Ç—ã", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è", "üßæ –î—Ä—É–≥–æ–µ"
]

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(CATEGORIES), 2):
        row = CATEGORIES[i:i+2]
        keyboard.add(*[types.KeyboardButton(text) for text in row])
    keyboard.add("üîç –ü–æ–∏—Å–∫")
    await message.answer("üìÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_docs(message: types.Message):
    file_name = message.document.file_name
    file_id = message.document.file_id
    await message.reply("üî§ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é), –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç:")
    dp.current_state(user=message.from_user.id).set_data({"file_id": file_id, "file_name": file_name})

@dp.message_handler(lambda message: message.text in CATEGORIES)
async def categorize_doc(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    data = await state.get_data()
    if not data:
        return await show_docs_by_category(message.text, message)
    file_id = data["file_id"]
    file_name = data["file_name"]
    category = message.text
    cursor.execute("INSERT INTO documents (file_id, file_name, category) VALUES (?, ?, ?)", (file_id, file_name, category))
    conn.commit()
    await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ¬´{file_name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
    await state.finish()

@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
async def prompt_search(message: types.Message):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:")

@dp.message_handler()
async def handle_text(message: types.Message):
    query = message.text.strip()
    cursor.execute("SELECT file_name, file_id FROM documents WHERE file_name LIKE ?", ('%' + query + '%',))
    results = cursor.fetchall()
    if results:
        for name, fid in results:
            await message.answer_document(fid, caption=name)
    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")

async def show_docs_by_category(category, message):
    cursor.execute("SELECT file_name, file_id FROM documents WHERE category=?", (category,))
    results = cursor.fetchall()
    if results:
        for name, fid in results:
            await message.answer_document(fid, caption=name)
    else:
        await message.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)